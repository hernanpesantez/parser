square   : Id
x   : Id
{   : LBrace
(   : LParen
*   : Times
x   : Id
x   : Id
)   : RParen
}   : RBrace
pi   : Id
{   : LBrace
3.14159   : Float
}   : RBrace
cylinderVolume   : Id
length   : Keyword_then
radius   : Id
{   : LBrace
(   : LParen
*   : Times
length   : Keyword_then
(   : LParen
*   : Times
(   : LParen
pi   : Id
)   : RParen
(   : LParen
square   : Id
radius   : Id
)   : RParen
)   : RParen
)   : RParen
}   : RBrace
fact   : Id
n   : Id
{   : LBrace
if   : Keyword_if
(   : LParen
=   : Eq
n   : Id
0   : Int
)   : RParen
then   : Id
1   : Int
else   : Id
(   : LParen
*   : Times
n   : Id
(   : LParen
fact   : Id
(   : LParen
-   : Minus
n   : Id
1   : Int
)   : RParen
)   : RParen
)   : RParen
}   : RBrace
test   : Id
x   : Id
y   : Id
{   : LBrace
if   : Keyword_if
(   : LParen
>   : Gt
x   : Id
-0987   : Int
)   : RParen
then   : Id
+6453   : Int
else   : Id
-1540   : Int
}   : RBrace
length   : Keyword_then
list   : Id
{   : LBrace
if   : Keyword_if
(   : LParen
=   : Eq
list   : Id
nil   : Id
)   : RParen
then   : Id
0   : Int
else   : Id
(   : LParen
+   : Plus
1   : Int
(   : LParen
length   : Keyword_then
(   : LParen
second   : Id
list   : Id
)   : RParen
)   : RParen
)   : RParen
}   : RBrace
buildList   : Id
i   : Id
{   : LBrace
if   : Keyword_if
(   : LParen
=   : Eq
i   : Id
0   : Int
)   : RParen
then   : Id
nil   : Id
else   : Id
(   : LParen
pair   : Id
i   : Id
(   : LParen
buildList   : Id
(   : LParen
-   : Minus
i   : Id
1   : Int
)   : RParen
)   : RParen
)   : RParen
}   : RBrace
map   : Id
f   : Id
list   : Id
{   : LBrace
if   : Keyword_if
(   : LParen
=   : Eq
list   : Id
nil   : Id
)   : RParen
then   : Id
nil   : Id
else   : Id
(   : LParen
pair   : Id
(   : LParen
f   : Id
(   : LParen
first   : Id
list   : Id
)   : RParen
)   : RParen
(   : LParen
map   : Id
f   : Id
(   : LParen
second   : Id
list   : Id
)   : RParen
)   : RParen
)   : RParen
}   : RBrace
filter   : Id
f   : Id
list   : Id
{   : LBrace
if   : Keyword_if
(   : LParen
=   : Eq
list   : Id
nil   : Id
)   : RParen
then   : Id
nil   : Id
else   : Id
if   : Keyword_if
(   : LParen
f   : Id
(   : LParen
first   : Id
list   : Id
)   : RParen
)   : RParen
then   : Id
(   : LParen
pair   : Id
(   : LParen
first   : Id
list   : Id
)   : RParen
(   : LParen
filter   : Id
f   : Id
(   : LParen
second   : Id
list   : Id
)   : RParen
)   : RParen
)   : RParen
else   : Id
(   : LParen
filter   : Id
f   : Id
(   : LParen
second   : Id
list   : Id
)   : RParen
)   : RParen
}   : RBrace
greaterThan10   : Id
x   : Id
{   : LBrace
(   : LParen
>   : Gt
x   : Id
10   : Int
)   : RParen
}   : RBrace
accumulate   : Id
f   : Id
list   : Id
initVal   : Id
{   : LBrace
if   : Keyword_if
(   : LParen
=   : Eq
list   : Id
nil   : Id
)   : RParen
then   : Id
initVal   : Id
else   : Id
(   : LParen
f   : Id
(   : LParen
first   : Id
list   : Id
)   : RParen
(   : LParen
accumulate   : Id
f   : Id
(   : LParen
second   : Id
list   : Id
)   : RParen
initVal   : Id
)   : RParen
)   : RParen
}   : RBrace
plus   : Id
x   : Id
y   : Id
{   : LBrace
(   : LParen
+   : Plus
x   : Id
y   : Id
)   : RParen
}   : RBrace
